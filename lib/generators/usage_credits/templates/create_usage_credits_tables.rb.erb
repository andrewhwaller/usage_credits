# frozen_string_literal: true

class CreateUsageCreditsTables < ActiveRecord::Migration<%= migration_version %>
  def change
    primary_key_type, foreign_key_type = primary_and_foreign_key_types

    create_table :usage_credits_wallets, id: primary_key_type do |t|
      t.references :owner, polymorphic: true, null: false, type: foreign_key_type
      t.integer :balance, null: false, default: 0
      t.send(json_column_type, :metadata, null: false, default: {})

      t.timestamps
    end

    create_table :usage_credits_transactions, id: primary_key_type do |t|
      t.references :wallet, null: false, type: foreign_key_type
      t.integer :amount, null: false
      t.string :category, null: false
      t.datetime :expires_at
      t.references :fulfillment, type: foreign_key_type
      t.send(json_column_type, :metadata, null: false, default: {})

      t.timestamps
    end

    create_table :usage_credits_fulfillments, id: primary_key_type do |t|
      t.references :wallet, null: false, type: foreign_key_type
      t.references :source, polymorphic: true, type: foreign_key_type
      t.integer :credits_last_fulfillment, null: false    # Credits given in last fulfillment
      t.string :fulfillment_type, null: false             # What kind of fulfillment is this? (credit_pack / subscription)
      t.datetime :last_fulfilled_at                       # When last fulfilled
      t.datetime :next_fulfillment_at                     # When to fulfill next (nil if stopped/completed)
      t.string :fulfillment_period                        # "2.months", "15.days", etc. (nil for one-time)
      t.datetime :expires_at                              # When credits from this fulfillment expire
      t.send(json_column_type, :metadata, null: false, default: {})

      t.timestamps
    end

    # Add indexes
    add_index :usage_credits_transactions, :category
    add_index :usage_credits_transactions, :expires_at
    add_index :usage_credits_fulfillments, :next_fulfillment_at
    add_index :usage_credits_fulfillments, :fulfillment_type
  end

  private

  def primary_and_foreign_key_types
    config = Rails.configuration.generators
    setting = config.options[config.orm][:primary_key_type]
    primary_key_type = setting || :primary_key
    foreign_key_type = setting || :bigint
    [primary_key_type, foreign_key_type]
  end

  def json_column_type
    return :jsonb if connection.adapter_name.downcase.include?('postgresql')
    :json
  end
end 